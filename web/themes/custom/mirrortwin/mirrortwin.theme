<?php

/**
 * @file
 * Add your custom theme override functions here.
 */

use Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess_block().
 */
function mirrortwin_preprocess_block(&$variables) {
}

/**
 * Implements template_preprocess_field().
 */
function mirrortwin_preprocess_field(&$variables, $hook) {
}

/**
 * Implements template_preprocess_html().
 *
 * Adds additional classes.
 */
function mirrortwin_preprocess_html(&$variables) {
}

/**
 * Implements template_preprocess_node.
 *
 * Add template suggestions and classes.
 */
function mirrortwin_preprocess_node(&$variables) {
}

/**
 * Implements template_preprocess_page.
 *
 * Add convenience variables and template suggestions.
 */
function mirrortwin_preprocess_page(&$variables) {
}

/**
 * Implements template_views_pre_render().
 */
function mirrortwin_views_pre_render(ViewExecutable &$view) {
  if (isset($view) && ($view->storage->id() == 'beer') && $view->current_display == 'on_tap_slider') {
    $view->element['#attached']['library'][] = 'mirrortwin/slider-base';
  }
}


/**
 * Implements hook_mirrortwin_layout_background_colors().
 */
function mirrortwin_custom_layout_background_colors(): array {
  return [
    'black' => t('Black'),
    'white' => t('White'),
    'light-gray' => t('Light Gray'),
    'medium-gray' => t('Medium Gray'),
    'dark-gray' => t('Dark Gray'),
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This theme suggestion allows specific forms to be themed.
 */
function mirrortwin_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_form_alter().
 *
 * This is used to add a class to the <form> for styling.
 */
function mirrortwin_form_alter(&$form, &$form_state) {
  // Do not add classes for Layout Builder forms.
  if (strpos($form['#form_id'], 'layout') !== false) {
    return;
  }

  $form['#attributes']['class'][] = 'c-form';
}

/**
 * Implements hook_preprocess_HOOK() for form_element.
 *
 * This is used to add a class to form element wrappers.
 */

function mirrortwin_preprocess_form_element(&$variables) {
  $variables['attributes']['class'][] = 'c-form__element';
}

/*
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mirrortwin_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // Do not add suggestion for Layout Builder inputs.
  if (isset($variables['element']['#name'])) {
    if (strpos($variables['element']['#name'], 'layout_settings') !== false) {
      return;
    }
  }

  $suggestions[] = 'input__' . $variables['element']['#type'] . '__custom';
}

/**
 * Implements template_preprocess_HOOK() for input.
 *
 * This is used to add a class to form elements by type.
 */
function mirrortwin_preprocess_input(&$variables) {
  $type_html = $variables['attributes']['type'];

  if (isset($variables['element']['#name'])) {
    // Do not add classes for Layout Builder inputs.
    if (strpos($variables['element']['#name'], 'layout_settings') !== false) {
      return;
    }

    // run through all types and set custom classes on the elements
    switch ($type_html) {
      case 'text':
      case 'password':
      case 'email':
      case 'tel':
      case 'number':
        $variables['attributes']['class'][] = 'c-form__text';

        // Remove a 'form-text' class. https://www.drupal.org/node/2315471
        $classes = $variables['attributes']['class'];
        $variables['attributes']['class'] = array_diff($classes, ['form-text']);
        break;
      case 'checkbox':
        $variables['attributes']['class'][] = 'c-form__checkbox';
        break;
      case 'radio':
        $variables['attributes']['class'][] = 'c-form__radio';
        break;
      case 'date':
        $variables['attributes']['class'][] = 'c-form__date';
        break;
      case 'time':
        $variables['attributes']['class'][] = 'c-form__time';
        break;
      case 'datetime':
        $variables['attributes']['class'][] = 'c-form__datetime';
        break;
      case 'submit':
        $variables['attributes']['class'][] = 'o-btn o-btn--primary';
        break;
    }
  }
}

/**
 * Implements template_preprocess_HOOK() for input.
 *
 * This is used to add a class to form elements by type.
 */
function mirrortwin_preprocess_form_element_label(&$variables) {
  // Do not add suggetstion for Layout Builder labels.
  if (strpos($variables['element']['#id'], 'layout-settings') !== false) {
    return;
  }

  $variables['attributes']['class'][] = 'c-form__label';
}

/*
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mirrortwin_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if(!in_array('block__layout_builder', $suggestions) && isset($variables['elements']['#lb-block'])) {
    array_unshift($suggestions , 'block__layout_builder');
  }

  // Provide suggestion for block templates by custom block type.
  if (!empty($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];

    // Add `block--BLOCK-TYPE.html.twig`.
    $suggestions[] = 'block__' . $block->bundle();
    $view_mode = $variables['elements']['#configuration']['view_mode'];

    if (!empty($view_mode)) {
      // Add `block--BLOCK-TYPE--VIEW-MODE.html.twig`.
      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;
    }
  }
}
