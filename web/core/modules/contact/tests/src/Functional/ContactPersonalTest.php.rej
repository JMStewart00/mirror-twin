--- modules/contact/tests/src/Functional/ContactPersonalTest.php
+++ modules/contact/tests/src/Functional/ContactPersonalTest.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Render\PlainTextOutput;
+use Drupal\Component\Utility\Html;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -25,7 +26,7 @@ class ContactPersonalTest extends BrowserTestBase {
    *
    * @var array
    */
-  public static $modules = ['contact', 'dblog'];
+  public static $modules = ['contact', 'dblog', 'mail_html_test'];
 
   /**
    * {@inheritdoc}
@@ -116,6 +117,20 @@ public function testSendPersonalContactMessage() {
     $this->assertRaw(new FormattableMarkup('@sender_name (@sender_email) sent @recipient_name an email.', $placeholders));
     // Ensure an unescaped version of the email does not exist anywhere.
     $this->assertNoRaw($this->webUser->getEmail());
+
+    // Test HTML mails.
+    $mail_config = $this->config('system.mail');
+    $mail_config->set('interface.default', 'test_html_mail_collector');
+    $mail_config->save();
+
+    $this->drupalLogin($this->webUser);
+    $message['message[0][value]'] = 'This <i>is</i> a more <b>specific</b> <sup>test</sup>, the emails are formatted now.';
+    $message = $this->submitPersonalContact($this->contactUser, $message);
+
+    // Assert mail content.
+    $this->assertMailString('body', 'Hello ' . $variables['@recipient-name'], 1);
+    $this->assertMailString('body', $this->webUser->getDisplayName(), 1);
+    $this->assertMailString('body', Html::Escape($message['message[0][value]']), 1);
   }
 
   /**
@@ -326,8 +341,8 @@ protected function checkContactAccess($response, $contact_value = NULL) {
    */
   protected function submitPersonalContact(AccountInterface $account, array $message = []) {
     $message += [
-      'subject[0][value]' => $this->randomMachineName(16),
-      'message[0][value]' => $this->randomMachineName(64),
+      'subject[0][value]' => $this->randomMachineName(16) . '< " =+ >',
+      'message[0][value]' => $this->randomMachineName(64) . '< " =+ >',
     ];
     $this->drupalPostForm('user/' . $account->id() . '/contact', $message, t('Send message'));
     return $message;
